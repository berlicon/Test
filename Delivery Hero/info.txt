Introduction
International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: “a” maps to “.-“, “b” maps to “-…”, “c” maps to “-.-.”, and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]

Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cab” can be written as “-.-..–…”, (which is the concatenation “-.-.” + “.-“ + “-…”). We’ll call such a concatenation, the transformation of a word.

Problem
Complete the implementation of solution such that it takes a string array of “normal” words, and outputs the number of unique Morse code transformations.

Example
solution(["gin", "zen"]) -> 1

Since:

“gin” -> “–…-.”
“zen” -> “–…-.”
Tips
Note that input could require some cleaning/validation

---
https://iamketan.wordpress.com/2021/01/01/804-unique-morse-code-words-leetcode/
https://russianblogs.com/article/5862488590/
https://walkccc.me/LeetCode/problems/0804/
https://levelup.gitconnected.com/javascript-problem-solvers-unique-morse-code-words-22368f0f640c